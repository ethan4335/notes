# 帮我写一个rnn模型demo，并能够运行
import torch
import torch.nn as nn
import torch.optim as optim



class RNN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super(RNN, self).__init__()
        self.hidden_size = hidden_size
        self.rnn = nn.RNN(input_size, hidden_size)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, input):
        output, hidden = self.rnn(input)
        output = self.fc(output)
        return output, hidden

# 定义输入和输出
input_size = 10
hidden_size = 20
output_size = 1

# 创建RNN模型
rnn = RNN(input_size, hidden_size, output_size)

# 定义损失函数和优化器
criterion = nn.MSELoss()
optimizer = optim.Adam(rnn.parameters(), lr=0.01)

# 训练模型
for epoch in range(100):
    for i in range(10):
        input = torch.randn(1, 10)
        target = torch.randn(1, 1)
        optimizer.zero_grad()
        output, hidden = rnn(input)
        loss = criterion(output, target)
        loss.backward()
        optimizer.step()

    print(f"Epoch {epoch} loss: {loss.item()}")



# 测试模型
input = torch.randn(1, 10)
output, hidden = rnn(input)
print(output)
print(hidden)

# 绘制模型结构
print(rnn)

